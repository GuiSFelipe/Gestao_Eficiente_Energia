//codigo_ESP32

#include <WiFi.h>
#include <PubSubClient.h>

// Configurações do Wi-Fi
const char* ssid = "Wifi";
const char* password = "Senha";

// Configurações do MQTT
const char* mqttServer = "test.mosquitto.org"; // Endereço do servidor MQTT (verifique se está correto)
const int mqttPort = 1883;
const char* mqttTopic = "test/movimento";

WiFiClient espClient;
PubSubClient client(espClient);

// Pino do LED (caso queira controlar um LED)
const int ledPin = 3; // Ajuste conforme o pino desejado

void setup() {
  Serial.begin(9600); // Comunicação serial com Arduino
  pinMode(ledPin, OUTPUT); // Define o pino do LED como saída
  WiFi.begin(ssid, password);

  // Aguarda a conexão Wi-Fi
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando-se ao Wi-Fi...");
  }
  Serial.println("Wi-Fi conectado");

  client.setServer(mqttServer, mqttPort);

  // Tenta conectar ao MQTT
  while (!client.connected()) {
    Serial.println("Conectando ao servidor MQTT...");
    if (client.connect("ESP32Cliente")) {
      Serial.println("Conectado ao MQTT!");
      client.subscribe(mqttTopic); // Inscreve-se no tópico
    } else {
      Serial.print("Falha na conexão MQTT. Código de erro: ");
      Serial.println(client.state());
      delay(5000); // Aguarda 5 segundos antes de tentar novamente
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  String message = "";
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  
  // Envia comandos ao Arduino
  if (message == "led ligado") {
    Serial.println("LED_ON");
    digitalWrite(ledPin, HIGH); // Liga o LED
  } else if (message == "led desligado") {
    Serial.println("LED_OFF");
    digitalWrite(ledPin, LOW); // Desliga o LED
  }
}

void loop() {
  client.loop();

  // Lê mensagens do Arduino e publica no MQTT
  if (Serial.available()) {
    String message = Serial.readString();
    client.publish(mqttTopic, message.c_str()); // Publica a mensagem no tópico
  }
}
